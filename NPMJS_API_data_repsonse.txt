{
  analyzedAt: '2022-11-15T15:28:15.242Z',
  collected: {
    metadata: {
      name: 'browserify',
      scope: 'unscoped',
      version: '17.0.0',
      description: 'browser-side require() the node way',
      keywords: [Array],
      date: '2020-10-10T09:33:23.702Z',
      author: [Object],
      publisher: [Object],
      maintainers: [Array],
      repository: [Object],
      links: [Object],
      license: 'MIT',
      dependencies: [Object],
      devDependencies: [Object],
      releases: [Array],
      hasTestScript: true,
      readme: '# browserify\n' +
        '\n' +
        "`require('modules')` in the browser\n" +
        '\n' +
        'Use a [node](http://nodejs.org)-style `require()` to organize your browser code\n' +
        'and load modules installed by [npm](https://www.npmjs.com).\n' +
        '\n' +
        'browserify will recursively analyze all the `require()` calls in your app in\n' +
        'order to build a bundle you can serve up to the browser in a single `<script>`\n' +
        'tag.\n' +
        '\n' +
        '[![build status](https://img.shields.io/travis/browserify/browserify/master.svg)](https://travis-ci.org/browserify/browserify)\n' +
        '\n' +
        '![browserify!](./assets/logo.png)\n' +
        '\n' +
        '# getting started\n' +
        '\n' +
        "If you're new to browserify, check out the\n" +
        '[browserify handbook](https://github.com/browserify/browserify-handbook)\n' +
        'and the resources on [browserify.org](http://browserify.org/).\n' +
        '\n' +
        '# example\n' +
        '\n' +
        'Whip up a file, `main.js` with some `require()`s in it. You can use relative\n' +
        "paths like `'./foo.js'` and `'../lib/bar.js'` or module paths like `'gamma'`\n" +
        'that will search `node_modules/` using\n' +
        "[node's module lookup algorithm](https://github.com/browserify/resolve).\n" +
        '\n' +
        '``` js\n' +
        "var foo = require('./foo.js');\n" +
        "var bar = require('../lib/bar.js');\n" +
        "var gamma = require('gamma');\n" +
        '\n' +
        "var elem = document.getElementById('result');\n" +
        "var x = foo(100) + bar('baz');\n" +
        'elem.textContent = gamma(x);\n' +
        '```\n' +
        '\n' +
        'Export functionality by assigning onto `module.exports` or `exports`:\n' +
        '\n' +
        '``` js\n' +
        'module.exports = function (n) { return n * 111 }\n' +
        '```\n' +
        '\n' +
        'Now just use the `browserify` command to build a bundle starting at `main.js`:\n' +
        '\n' +
        '```\n' +
        '$ browserify main.js > bundle.js\n' +
        '```\n' +
        '\n' +
        'All of the modules that `main.js` needs are included in the `bundle.js` from a\n' +
        'recursive walk of the `require()` graph using\n' +
        '[required](https://github.com/defunctzombie/node-required).\n' +
        '\n' +
        'To use this bundle, just toss a `<script src="bundle.js"></script>` into your\n' +
        'html!\n' +
        '\n' +
        '# install\n' +
        '\n' +
        'With [npm](https://www.npmjs.com/) do:\n' +
        '\n' +
        '```\n' +
        'npm install -g browserify\n' +
        '```\n' +
        '\n' +
        '# usage\n' +
        '\n' +
        '```\n' +
        'Usage: browserify [entry files] {OPTIONS}\n' +
        '\n' +
        'Standard Options:\n' +
        '\n' +
        '    --outfile, -o  Write the browserify bundle to this file.\n' +
        '                   If unspecified, browserify prints to stdout.\n' +
        '\n' +
        '    --require, -r  A module name or file to bundle.require()\n' +
        '                   Optionally use a colon separator to set the target.\n' +
        '\n' +
        '      --entry, -e  An entry point of your app\n' +
        '\n' +
        '     --ignore, -i  Replace a file with an empty stub. Files can be globs.\n' +
        '\n' +
        '    --exclude, -u  Omit a file from the output bundle. Files can be globs.\n' +
        '\n' +
        '   --external, -x  Reference a file from another bundle. Files can be globs.\n' +
        '\n' +
        '  --transform, -t  Use a transform module on top-level files.\n' +
        '\n' +
        '    --command, -c  Use a transform command on top-level files.\n' +
        '\n' +
        '  --standalone -s  Generate a UMD bundle for the supplied export name.\n' +
        '                   This bundle works with other module systems and sets the name\n' +
        '                   given as a window global if no module system is found.\n' +
        '\n' +
        '       --debug -d  Enable source maps that allow you to debug your files\n' +
        '                   separately.\n' +
        '\n' +
        '       --help, -h  Show this message\n' +
        '\n' +
        'For advanced options, type `browserify --help advanced`.\n' +
        '\n' +
        'Specify a parameter.\n' +
        '```\n' +
        '\n' +
        '```\n' +
        'Advanced Options:\n' +
        '\n' +
        '  --insert-globals, --ig, --fast    [default: false]\n' +
        '\n' +
        '    Skip detection and always insert definitions for process, global,\n' +
        '    __filename, and __dirname.\n' +
        '\n' +
        '    benefit: faster builds\n' +
        '    cost: extra bytes\n' +
        '\n' +
        '  --insert-global-vars, --igv\n' +
        '\n' +
        '    Comma-separated list of global variables to detect and define.\n' +
        '    Default: __filename,__dirname,process,Buffer,global\n' +
        '\n' +
        '  --detect-globals, --dg            [default: true]\n' +
        '\n' +
        '    Detect the presence of process, global, __filename, and __dirname and define\n' +
        '    these values when present.\n' +
        '\n' +
        '    benefit: npm modules more likely to work\n' +
        '    cost: slower builds\n' +
        '\n' +
        '  --ignore-missing, --im            [default: false]\n' +
        '\n' +
        "    Ignore `require()` statements that don't resolve to anything.\n" +
        '\n' +
        '  --noparse=FILE\n' +
        '\n' +
        "    Don't parse FILE at all. This will make bundling much, much faster for giant\n" +
        '    libs like jquery or threejs.\n' +
        '\n' +
        '  --no-builtins\n' +
        '\n' +
        '    Turn off builtins. This is handy when you want to run a bundle in node which\n' +
        '    provides the core builtins.\n' +
        '\n' +
        '  --no-commondir\n' +
        '\n' +
        '    Turn off setting a commondir. This is useful if you want to preserve the\n' +
        '    original paths that a bundle was generated with.\n' +
        '\n' +
        '  --no-bundle-external\n' +
        '\n' +
        '    Turn off bundling of all external modules. This is useful if you only want\n' +
        '    to bundle your local files.\n' +
        '\n' +
        '  --bare\n' +
        '\n' +
        '    Alias for both --no-builtins, --no-commondir, and sets --insert-global-vars\n' +
        '    to just "__filename,__dirname". This is handy if you want to run bundles in\n' +
        '    node.\n' +
        '\n' +
        '  --no-browser-field, --no-bf\n' +
        '\n' +
        '    Turn off package.json browser field resolution. This is also handy if you\n' +
        '    need to run a bundle in node.\n' +
        '\n' +
        '  --transform-key\n' +
        '\n' +
        '    Instead of the default package.json#browserify#transform field to list\n' +
        '    all transforms to apply when running browserify, a custom field, like, e.g.\n' +
        '    package.json#browserify#production or package.json#browserify#staging\n' +
        '    can be used, by for example running:\n' +
        '    * `browserify index.js --transform-key=production > bundle.js`\n' +
        '    * `browserify index.js --transform-key=staging > bundle.js`\n' +
        '\n' +
        '  --node\n' +
        '\n' +
        '    Alias for --bare and --no-browser-field.\n' +
        '\n' +
        '  --full-paths\n' +
        '\n' +
        '    Turn off converting module ids into numerical indexes. This is useful for\n' +
        '    preserving the original paths that a bundle was generated with.\n' +
        '\n' +
        '  --deps\n' +
        '\n' +
        '    Instead of standard bundle output, print the dependency array generated by\n' +
        '    module-deps.\n' +
        '\n' +
        '  --no-dedupe\n' +
        '\n' +
        '    Turn off deduping.\n' +
        '\n' +
        '  --list\n' +
        '\n' +
        '    Print each file in the dependency graph. Useful for makefiles.\n' +
        '\n' +
        '  --extension=EXTENSION\n' +
        '\n' +
        '    Consider files with specified EXTENSION as modules, this option can used\n' +
        '    multiple times.\n' +
        '\n' +
        '  --global-transform=MODULE, -g MODULE\n' +
        '\n' +
        '    Use a transform module on all files after any ordinary transforms have run.\n' +
        '\n' +
        '  --ignore-transform=MODULE, -it MODULE\n' +
        '\n' +
        '    Do not run certain transformations, even if specified elsewhere.\n' +
        '\n' +
        '  --plugin=MODULE, -p MODULE\n' +
        '\n' +
        '    Register MODULE as a plugin.\n' +
        '\n' +
        'Passing arguments to transforms and plugins:\n' +
        '\n' +
        '  For -t, -g, and -p, you may use subarg syntax to pass options to the\n' +
        '  transforms or plugin function as the second parameter. For example:\n' +
        '\n' +
        '    -t [ foo -x 3 --beep ]\n' +
        '\n' +
        '  will call the `foo` transform for each applicable file by calling:\n' +
        '\n' +
        '    foo(file, { x: 3, beep: true })\n' +
        '\n' +
        '```\n' +
        '\n' +
        '# compatibility\n' +
        '\n' +
        "Many [npm](https://www.npmjs.com/) modules that don't do IO will just work after being\n" +
        'browserified. Others take more work.\n' +
        '\n' +
        'Many node built-in modules have been wrapped to work in the browser, but only\n' +
        'when you explicitly `require()` or use their functionality.\n' +
        '\n' +
        'When you `require()` any of these modules, you will get a browser-specific shim:\n' +
        '\n' +
        '* [assert](https://www.npmjs.com/package/assert)\n' +
        '* [buffer](https://www.npmjs.com/package/buffer)\n' +
        '* [console](https://www.npmjs.com/package/console-browserify)\n' +
        '* [constants](https://www.npmjs.com/package/constants-browserify)\n' +
        '* [crypto](https://www.npmjs.com/package/crypto-browserify)\n' +
        '* [domain](https://www.npmjs.com/package/domain-browser)\n' +
        '* [events](https://www.npmjs.com/package/events)\n' +
        '* [http](https://www.npmjs.com/package/stream-http)\n' +
        '* [https](https://www.npmjs.com/package/https-browserify)\n' +
        '* [os](https://www.npmjs.com/package/os-browserify)\n' +
        '* [path](https://www.npmjs.com/package/path-browserify)\n' +
        '* [punycode](https://www.npmjs.com/package/punycode)\n' +
        '* [querystring](https://www.npmjs.com/package/querystring-es3)\n' +
        '* [stream](https://www.npmjs.com/package/stream-browserify)\n' +
        '* [string_decoder](https://www.npmjs.com/package/string_decoder)\n' +
        '* [timers](https://www.npmjs.com/package/timers-browserify)\n' +
        '* [tty](https://www.npmjs.com/package/tty-browserify)\n' +
        '* [url](https://www.npmjs.com/package/url)\n' +
        '* [util](https://www.npmjs.com/package/util)\n' +
        '* [vm](https://www.npmjs.com/package/vm-browserify)\n' +
        '* [zlib](https://www.npmjs.com/package/browserify-zlib)\n' +
        '\n' +
        'Additionally, if you use any of these variables, they\n' +
        '[will be defined](https://github.com/browserify/insert-module-globals)\n' +
        'in the bundled output in a browser-appropriate way:\n' +
        '\n' +
        '* [process](https://www.npmjs.com/package/process)\n' +
        '* [Buffer](https://www.npmjs.com/package/buffer)\n' +
        '* global - top-level scope object (window)\n' +
        '* __filename - file path of the currently executing file\n' +
        '* __dirname - directory path of the currently executing file\n' +
        '\n' +
        '# more examples\n' +
        '\n' +
        '## external requires\n' +
        '\n' +
        'You can just as easily create a bundle that will export a `require()` function so\n' +
        "you can `require()` modules from another script tag. Here we'll create a\n" +
        '`bundle.js` with the [through](https://www.npmjs.com/package/through)\n' +
        'and [duplexer](https://www.npmjs.com/package/duplexer) modules.\n' +
        '\n' +
        '```\n' +
        '$ browserify -r through -r duplexer -r ./my-file.js:my-module > bundle.js\n' +
        '```\n' +
        '\n' +
        'Then in your page you can do:\n' +
        '\n' +
        '``` html\n' +
        '<script src="bundle.js"></script>\n' +
        '<script>\n' +
        "  var through = require('through');\n" +
        "  var duplexer = require('duplexer');\n" +
        "  var myModule = require('my-module');\n" +
        '  /* ... */\n' +
        '</script>\n' +
        '```\n' +
        '\n' +
        '## external source maps\n' +
        '\n' +
        'If you prefer the source maps be saved to a separate `.js.map` source map file, you may use\n' +
        "[exorcist](https://github.com/thlorenz/exorcist) in order to achieve that. It's as simple as:\n" +
        '\n' +
        '```\n' +
        '$ browserify main.js --debug | exorcist bundle.js.map > bundle.js\n' +
        '```\n' +
        '\n' +
        'Learn about additional options [here](https://github.com/thlorenz/exorcist#usage).\n' +
        '\n' +
        '## multiple bundles\n' +
        '\n' +
        'If browserify finds a `require`d function already defined in the page scope, it\n' +
        "will fall back to that function if it didn't find any matches in its own set of\n" +
        'bundled modules.\n' +
        '\n' +
        'In this way, you can use browserify to split up bundles among multiple pages to\n' +
        'get the benefit of caching for shared, infrequently-changing modules, while\n' +
        'still being able to use `require()`. Just use a combination of `--external` and\n' +
        '`--require` to factor out common dependencies.\n' +
        '\n' +
        'For example, if a website with 2 pages, `beep.js`:\n' +
        '\n' +
        '``` js\n' +
        "var robot = require('./robot.js');\n" +
        "console.log(robot('beep'));\n" +
        '```\n' +
        '\n' +
        'and `boop.js`:\n' +
        '\n' +
        '``` js\n' +
        "var robot = require('./robot.js');\n" +
        "console.log(robot('boop'));\n" +
        '```\n' +
        '\n' +
        'both depend on `robot.js`:\n' +
        '\n' +
        '``` js\n' +
        "module.exports = function (s) { return s.toUpperCase() + '!' };\n" +
        '```\n' +
        '\n' +
        '```\n' +
        '$ browserify -r ./robot.js > static/common.js\n' +
        '$ browserify -x ./robot.js beep.js > static/beep.js\n' +
        '$ browserify -x ./robot.js boop.js > static/boop.js\n' +
        '```\n' +
        '\n' +
        'Then on the beep page you can have:\n' +
        '\n' +
        '``` html\n' +
        '<script src="common.js"></script>\n' +
        '<script src="beep.js"></script>\n' +
        '```\n' +
        '\n' +
        'while the boop page can have:\n' +
        '\n' +
        '``` html\n' +
        '<script src="common.js"></script>\n' +
        '<script src="boop.js"></script>\n' +
        '```\n' +
        '\n' +
        'This approach using `-r` and `-x` works fine for a small number of split assets,\n' +
        'but there are plugins for automatically factoring out components which are\n' +
        'described in the\n' +
        '[partitioning section of the browserify handbook](https://github.com/browserify/browserify-handbook#partitioning).\n' +
        '\n' +
        '## api example\n' +
        '\n' +
        'You can use the API directly too:\n' +
        '\n' +
        '``` js\n' +
        "var browserify = require('browserify');\n" +
        'var b = browserify();\n' +
        "b.add('./browser/main.js');\n" +
        'b.bundle().pipe(process.stdout);\n' +
        '```\n' +
        '\n' +
        '# methods\n' +
        '\n' +
        '``` js\n' +
        "var browserify = require('browserify')\n" +
        '```\n' +
        '\n' +
        '## `browserify([files] [, opts])`\n' +
        '\n' +
        'Returns a new browserify instance.\n' +
        '\n' +
        '<dl>\n' +
        '<dt>\n' +
        'files\n' +
        '</dt>\n' +
        '\n' +
        '<dd>\n' +
        'String, file object, or array of those types (they may be mixed) specifying entry file(s).\n' +
        '</dd>\n' +
        '\n' +
        '<dt>\n' +
        'opts\n' +
        '</dt>\n' +
        '\n' +
        '<dd>\n' +
        'Object.\n' +
        '</dd>\n' +
        '</dl>\n' +
        '\n' +
        '`files` and `opts` are both optional, but must be in the order shown if both are\n' +
        'passed.\n' +
        '\n' +
        'Entry files may be passed in `files` and / or `opts.entries`.\n' +
        '\n' +
        'External requires may be specified in `opts.require`, accepting the same formats\n' +
        'that the `files` argument does.\n' +
        '\n' +
        'If an entry file is a stream, its contents will be used. You should pass\n' +
        '`opts.basedir` when using streaming files so that relative requires can be\n' +
        'resolved.\n' +
        '\n' +
        '`opts.entries` has the same definition as `files`.\n' +
        '\n' +
        '`opts.noParse` is an array which will skip all require() and global parsing for\n' +
        'each file in the array. Use this for giant libs like jquery or threejs that\n' +
        "don't have any requires or node-style globals but take forever to parse.\n" +
        '\n' +
        '`opts.transform` is an array of transform functions or modules names which will\n' +
        'transform the source code before the parsing.\n' +
        '\n' +
        '`opts.ignoreTransform` is an array of transformations that will not be run,\n' +
        'even if specified elsewhere.\n' +
        '\n' +
        '`opts.plugin` is an array of plugin functions or module names to use. See the\n' +
        'plugins section below for details.\n' +
        '\n' +
        '`opts.extensions` is an array of optional extra extensions for the module lookup\n' +
        'machinery to use when the extension has not been specified.\n' +
        'By default browserify considers only `.js` and `.json` files in such cases.\n' +
        '\n' +
        '`opts.basedir` is the directory that browserify starts bundling from for\n' +
        'filenames that start with `.`.\n' +
        '\n' +
        '`opts.paths` is an array of directories that browserify searches when looking\n' +
        'for modules which are not referenced using relative path. Can be absolute or\n' +
        'relative to `basedir`. Equivalent of setting `NODE_PATH` environmental variable\n' +
        'when calling `browserify` command.\n' +
        '\n' +
        '`opts.commondir` sets the algorithm used to parse out the common paths. Use\n' +
        '`false` to turn this off, otherwise it uses the\n' +
        '[commondir](https://www.npmjs.com/package/commondir) module.\n' +
        '\n' +
        '`opts.fullPaths` disables converting module ids into numerical indexes. This is\n' +
        'useful for preserving the original paths that a bundle was generated with.\n' +
        '\n' +
        '`opts.builtins` sets the list of built-ins to use, which by default is set in\n' +
        '`lib/builtins.js` in this distribution.\n' +
        '\n' +
        '`opts.bundleExternal` boolean option to set if external modules should be\n' +
        'bundled. Defaults to true.\n' +
        '\n' +
        'When `opts.browserField` is false, the package.json browser field will be\n' +
        'ignored. When `opts.browserField` is set to a `string`, then a custom field name\n' +
        'can be used instead of the default `"browser"` field.\n' +
        '\n' +
        'When `opts.insertGlobals` is true, always insert `process`, `global`,\n' +
        '`__filename`, and `__dirname` without analyzing the AST for faster builds but\n' +
        'larger output bundles. Default false.\n' +
        '\n' +
        'When `opts.detectGlobals` is true, scan all files for `process`, `global`,\n' +
        '`__filename`, and `__dirname`, defining as necessary. With this option npm\n' +
        'modules are more likely to work but bundling takes longer. Default true.\n' +
        '\n' +
        "When `opts.ignoreMissing` is true, ignore `require()` statements that don't\n" +
        'resolve to anything.\n' +
        '\n' +
        'When `opts.debug` is true, add a source map inline to the end of the bundle.\n' +
        'This makes debugging easier because you can see all the original files if\n' +
        'you are in a modern enough browser.\n' +
        '\n' +
        'When `opts.standalone` is a non-empty string, a standalone module is created\n' +
        'with that name and a [umd](https://github.com/forbeslindesay/umd) wrapper.\n' +
        'You can use namespaces in the standalone global export using a `.` in the string\n' +
        "name as a separator, for example `'A.B.C'`. The global export will be [sanitized\n" +
        'and camel cased](https://github.com/ForbesLindesay/umd#name-casing-and-characters).\n' +
        '\n' +
        'Note that in standalone mode the `require()` calls from the original source will\n' +
        'still be around, which may trip up AMD loaders scanning for `require()` calls.\n' +
        'You can remove these calls with\n' +
        '[derequire](https://www.npmjs.com/package/derequire):\n' +
        '\n' +
        '```\n' +
        '$ npm install -g derequire\n' +
        '$ browserify main.js --standalone Foo | derequire > bundle.js\n' +
        '```\n' +
        '\n' +
        '`opts.insertGlobalVars` will be passed to\n' +
        '[insert-module-globals](https://www.npmjs.com/package/insert-module-globals)\n' +
        'as the `opts.vars` parameter.\n' +
        '\n' +
        "`opts.externalRequireName` defaults to `'require'` in `expose` mode but you can\n" +
        'use another name.\n' +
        '\n' +
        '`opts.bare` creates a bundle that does not include Node builtins, and does not\n' +
        'replace global Node variables except for `__dirname` and `__filename`.\n' +
        '\n' +
        '`opts.node` creates a bundle that runs in Node and does not use the browser\n' +
        'versions of dependencies. Same as passing `{ bare: true, browserField: false }`.\n' +
        '\n' +
        'Note that if files do not contain javascript source code then you also need to\n' +
        'specify a corresponding transform for them.\n' +
        '\n' +
        'All other options are forwarded along to\n' +
        '[module-deps](https://www.npmjs.com/package/module-deps)\n' +
        'and [browser-pack](https://www.npmjs.com/package/browser-pack) directly.\n' +
        '\n' +
        '## b.add(file, opts)\n' +
        '\n' +
        'Add an entry file from `file` that will be executed when the bundle loads.\n' +
        '\n' +
        'If `file` is an array, each item in `file` will be added as an entry file.\n' +
        '\n' +
        '## b.require(file, opts)\n' +
        '\n' +
        'Make `file` available from outside the bundle with `require(file)`.\n' +
        '\n' +
        'The `file` param is anything that can be resolved by `require.resolve()`,\n' +
        'including files from `node_modules`. Like with `require.resolve()`, you must\n' +
        'prefix `file` with `./` to require a local file (not in `node_modules`).\n' +
        '\n' +
        '`file` can also be a stream, but you should also use `opts.basedir` so that\n' +
        'relative requires will be resolvable.\n' +
        '\n' +
        'If `file` is an array, each item in `file` will be required.\n' +
        'In `file` array form, you can use a string or object for each item. Object items\n' +
        'should have a `file` property and the rest of the parameters will be used for\n' +
        'the `opts`.\n' +
        '\n' +
        'Use the `expose` property of opts to specify a custom dependency name.\n' +
        "`require('./vendor/angular/angular.js', {expose: 'angular'})` enables `require('angular')`\n" +
        '\n' +
        '## b.bundle(cb)\n' +
        '\n' +
        'Bundle the files and their dependencies into a single javascript file.\n' +
        '\n' +
        'Return a readable stream with the javascript file contents or\n' +
        'optionally specify a `cb(err, buf)` to get the buffered results.\n' +
        '\n' +
        '## b.external(file)\n' +
        '\n' +
        'Prevent `file` from being loaded into the current bundle, instead referencing\n' +
        'from another bundle.\n' +
        '\n' +
        'If `file` is an array, each item in `file` will be externalized.\n' +
        '\n' +
        "If `file` is another bundle, that bundle's contents will be read and excluded\n" +
        'from the current bundle as the bundle in `file` gets bundled.\n' +
        '\n' +
        '## b.ignore(file)\n' +
        '\n' +
        'Prevent the module name or file at `file` from showing up in the output bundle.\n' +
        '\n' +
        'If `file` is an array, each item in `file` will be ignored.\n' +
        '\n' +
        'Instead you will get a file with `module.exports = {}`.\n' +
        '\n' +
        '## b.exclude(file)\n' +
        '\n' +
        'Prevent the module name or file at `file` from showing up in the output bundle.\n' +
        '\n' +
        'If `file` is an array, each item in `file` will be excluded.\n' +
        '\n' +
        "If your code tries to `require()` that file it will throw unless you've provided\n" +
        'another mechanism for loading it.\n' +
        '\n' +
        '## b.transform(tr, opts={})\n' +
        '\n' +
        'Transform source code before parsing it for `require()` calls with the transform\n' +
        'function or module name `tr`.\n' +
        '\n' +
        'If `tr` is a function, it will be called with `tr(file)` and it should return a\n' +
        '[through-stream](https://github.com/substack/stream-handbook#through)\n' +
        'that takes the raw file contents and produces the transformed source.\n' +
        '\n' +
        'If `tr` is a string, it should be a module name or file path of a\n' +
        '[transform module](https://github.com/browserify/module-deps#transforms)\n' +
        'with a signature of:\n' +
        '\n' +
        '``` js\n' +
        "var through = require('through');\n" +
        'module.exports = function (file) { return through() };\n' +
        '```\n' +
        '\n' +
        "You don't need to necessarily use the\n" +
        '[through](https://www.npmjs.com/package/through) module.\n' +
        'Browserify is compatible with the newer, more verbose\n' +
        '[Transform streams](http://nodejs.org/api/stream.html#stream_class_stream_transform_1)\n' +
        'built into Node v0.10.\n' +
        '\n' +
        "Here's how you might compile coffee script on the fly using `.transform()`:\n" +
        '\n' +
        '``` js\n' +
        "var coffee = require('coffee-script');\n" +
        "var through = require('through');\n" +
        '\n' +
        'b.transform(function (file) {\n' +
        "    var data = '';\n" +
        '    return through(write, end);\n' +
        '\n' +
        '    function write (buf) { data += buf }\n' +
        '    function end () {\n' +
        '        this.queue(coffee.compile(data));\n' +
        '        this.queue(null);\n' +
        '    }\n' +
        '});\n' +
        '```\n' +
        '\n' +
        'Note that on the command-line with the `-c` flag you can just do:\n' +
        '\n' +
        '```\n' +
        "$ browserify -c 'coffee -sc' main.coffee > bundle.js\n" +
        '```\n' +
        '\n' +
        'Or better still, use the [coffeeify](https://github.com/jnordberg/coffeeify)\n' +
        'module:\n' +
        '\n' +
        '```\n' +
        '$ npm install coffeeify\n' +
        '$ browserify -t coffeeify main.coffee > bundle.js\n' +
        '```\n' +
        '\n' +
        'If `opts.global` is `true`, the transform will operate on ALL files, despite\n' +
        'whether they exist up a level in a `node_modules/` directory. Use global\n' +
        'transforms cautiously and sparingly, since most of the time an ordinary\n' +
        'transform will suffice. You can also not configure global transforms in a\n' +
        '`package.json` like you can with ordinary transforms.\n' +
        '\n' +
        'Global transforms always run after any ordinary transforms have run.\n' +
        '\n' +
        'Transforms may obtain options from the command-line with\n' +
        '[subarg](https://www.npmjs.com/package/subarg) syntax:\n' +
        '\n' +
        '```\n' +
        '$ browserify -t [ foo --bar=555 ] main.js\n' +
        '```\n' +
        '\n' +
        'or from the api:\n' +
        '\n' +
        '```\n' +
        "b.transform('foo', { bar: 555 })\n" +
        '```\n' +
        '\n' +
        'In both cases, these options are provided as the second argument to the\n' +
        'transform function:\n' +
        '\n' +
        '```\n' +
        'module.exports = function (file, opts) { /* opts.bar === 555 */ }\n' +
        '```\n' +
        '\n' +
        'Options sent to the browserify constructor are also provided under\n' +
        '`opts._flags`. These browserify options are sometimes required if your transform\n' +
        'needs to do something different when browserify is run in debug mode, for\n' +
        'example.\n' +
        '\n' +
        '## b.plugin(plugin, opts)\n' +
        '\n' +
        'Register a `plugin` with `opts`. Plugins can be a string module name or a\n' +
        'function the same as transforms.\n' +
        '\n' +
        '`plugin(b, opts)` is called with the browserify instance `b`.\n' +
        '\n' +
        'For more information, consult the plugins section below.\n' +
        '\n' +
        '## b.pipeline\n' +
        '\n' +
        'There is an internal\n' +
        '[labeled-stream-splicer](https://www.npmjs.com/package/labeled-stream-splicer)\n' +
        'pipeline with these labels:\n' +
        '\n' +
        "* `'record'` - save inputs to play back later on subsequent `bundle()` calls\n" +
        "* `'deps'` - [module-deps](https://www.npmjs.com/package/module-deps)\n" +
        "* `'json'` - adds `module.exports=` to the beginning of json files\n" +
        "* `'unbom'` - remove byte-order markers\n" +
        "* `'unshebang'` - remove #! labels on the first line\n" +
        "* `'syntax'` - check for syntax errors\n" +
        "* `'sort'` - sort the dependencies for deterministic bundles\n" +
        "* `'dedupe'` - remove duplicate source contents\n" +
        "* `'label'` - apply integer labels to files\n" +
        "* `'emit-deps'` - emit `'dep'` event\n" +
        "* `'debug'` - apply source maps\n" +
        "* `'pack'` - [browser-pack](https://www.npmjs.com/package/browser-pack)\n" +
        "* `'wrap'` - apply final wrapping, `require=` and a newline and semicolon\n" +
        '\n' +
        'You can call `b.pipeline.get()` with a label name to get a handle on a stream pipeline\n' +
        'that you can `push()`, `unshift()`, or `splice()` to insert your own transform\n' +
        'streams.\n' +
        '\n' +
        '## b.reset(opts)\n' +
        '\n' +
        'Reset the pipeline back to a normal state. This function is called automatically\n' +
        'when `bundle()` is called multiple times.\n' +
        '\n' +
        "This function triggers a 'reset' event.\n" +
        '\n' +
        '# package.json\n' +
        '\n' +
        'browserify uses the `package.json` in its module resolution algorithm, just like\n' +
        'node. If there is a `"main"` field, browserify will start resolving the package\n' +
        'at that point. If there is no `"main"` field, browserify will look for an\n' +
        '`"index.js"` file in the module root directory. Here are some more\n' +
        'sophisticated things you can do in the package.json:\n' +
        '\n' +
        '## browser field\n' +
        '\n' +
        'There is a special "[browser](https://github.com/defunctzombie/package-browser-field-spec)" field you can\n' +
        'set in your package.json on a per-module basis to override file resolution for\n' +
        'browser-specific versions of files.\n' +
        '\n' +
        'For example, if you want to have a browser-specific module entry point for your\n' +
        '`"main"` field you can just set the `"browser"` field to a string:\n' +
        '\n' +
        '``` json\n' +
        '"browser": "./browser.js"\n' +
        '```\n' +
        '\n' +
        'or you can have overrides on a per-file basis:\n' +
        '\n' +
        '``` json\n' +
        '"browser": {\n' +
        '  "fs": "level-fs",\n' +
        '  "./lib/ops.js": "./browser/opts.js"\n' +
        '}\n' +
        '```\n' +
        '\n' +
        'Note that the browser field only applies to files in the local module, and like\n' +
        "transforms, it doesn't apply into `node_modules` directories.\n" +
        '\n' +
        '## browserify.transform\n' +
        '\n' +
        'You can specify source transforms in the package.json in the\n' +
        '`browserify.transform` field. There is more information about how source\n' +
        'transforms work in package.json on the\n' +
        '[module-deps readme](https://github.com/browserify/module-deps#transforms).\n' +
        '\n' +
        'For example, if your module requires [brfs](https://www.npmjs.com/package/brfs), you\n' +
        'can add\n' +
        '\n' +
        '``` json\n' +
        '"browserify": { "transform": [ "brfs" ] }\n' +
        '```\n' +
        '\n' +
        'to your package.json. Now when somebody `require()`s your module, brfs will\n' +
        'automatically be applied to the files in your module without explicit\n' +
        'intervention by the person using your module. Make sure to add transforms to\n' +
        'your package.json dependencies field.\n' +
        '\n' +
        '# events\n' +
        '\n' +
        "## b.on('file', function (file, id, parent) {})\n" +
        "## b.pipeline.on('file', function (file, id, parent) {})\n" +
        '\n' +
        "When a file is resolved for the bundle, the bundle emits a `'file'` event with\n" +
        'the full `file` path, the `id` string passed to `require()`, and the `parent`\n' +
        'object used by\n' +
        '[browser-resolve](https://github.com/defunctzombie/node-browser-resolve).\n' +
        '\n' +
        'You could use the `file` event to implement a file watcher to regenerate bundles\n' +
        'when files change.\n' +
        '\n' +
        "## b.on('package', function (pkg) {})\n" +
        "## b.pipeline.on('package', function (pkg) {})\n" +
        '\n' +
        'When a package file is read, this event fires with the contents. The package\n' +
        'directory is available at `pkg.__dirname`.\n' +
        '\n' +
        "## b.on('bundle', function (bundle) {})\n" +
        '\n' +
        'When `.bundle()` is called, this event fires with the `bundle` output stream.\n' +
        '\n' +
        "## b.on('reset', function () {})\n" +
        '\n' +
        'When the `.reset()` method is called or implicitly called by another call to\n' +
        '`.bundle()`, this event fires.\n' +
        '\n' +
        "## b.on('transform', function (tr, file) {})\n" +
        "## b.pipeline.on('transform', function (tr, file) {})\n" +
        '\n' +
        "When a transform is applied to a file, the `'transform'` event fires on the\n" +
        'bundle stream with the transform stream `tr` and the `file` that the transform\n' +
        'is being applied to.\n' +
        '\n' +
        '# plugins\n' +
        '\n' +
        'For some more advanced use-cases, a transform is not sufficiently extensible.\n' +
        'Plugins are modules that take the bundle instance as their first parameter and\n' +
        'an option hash as their second.\n' +
        '\n' +
        "Plugins can be used to do perform some fancy features that transforms can't do.\n" +
        'For example, [factor-bundle](https://www.npmjs.com/package/factor-bundle) is a\n' +
        'plugin that can factor out common dependencies from multiple entry-points into a\n' +
        'common bundle. Use plugins with `-p` and pass options to plugins with\n' +
        '[subarg](https://www.npmjs.com/package/subarg) syntax:\n' +
        '\n' +
        '```\n' +
        'browserify x.js y.js -p [ factor-bundle -o bundle/x.js -o bundle/y.js ] \\\n' +
        '  > bundle/common.js\n' +
        '```\n' +
        '\n' +
        'For a list of plugins, consult the\n' +
        '[browserify-plugin tag](https://www.npmjs.com/browse/keyword/browserify-plugin)\n' +
        'on npm.\n' +
        '\n' +
        '# list of source transforms\n' +
        '\n' +
        'There is a [wiki page that lists the known browserify\n' +
        'transforms](https://github.com/browserify/browserify/wiki/list-of-transforms).\n' +
        '\n' +
        'If you write a transform, make sure to add your transform to that wiki page and\n' +
        'add a package.json keyword of `browserify-transform` so that\n' +
        '[people can browse for all the browserify\n' +
        'transforms](https://www.npmjs.com/browse/keyword/browserify-transform) on npmjs.org.\n' +
        '\n' +
        '# third-party tools\n' +
        '\n' +
        'There is a [wiki page that lists the known browserify\n' +
        'tools](https://github.com/browserify/browserify/wiki/browserify-tools).\n' +
        '\n' +
        'If you write a tool, make sure to add it to that wiki page and\n' +
        'add a package.json keyword of `browserify-tool` so that\n' +
        '[people can browse for all the browserify\n' +
        'tools](https://www.npmjs.com/browse/keyword/browserify-tool) on npmjs.org.\n' +
        '\n' +
        '# changelog\n' +
        '\n' +
        'Releases are documented in\n' +
        '[changelog.markdown](changelog.markdown) and on the\n' +
        '[browserify twitter feed](https://twitter.com/browserify).\n' +
        '\n' +
        '# license\n' +
        '\n' +
        '[MIT](./LICENSE)\n' +
        '\n' +
        '![browserify!](./assets/browserify.png)'
    },
    npm: { downloads: [Array], starsCount: 922 },
    github: {
      homepage: 'http://browserify.org/',
      starsCount: 14258,
      forksCount: 1245,
      subscribersCount: 292,
      issues: [Object],
      contributors: [Array],
      commits: [Array],
      statuses: [Array]
    },
    source: {
      files: [Object],
      badges: [Array],
      outdatedDependencies: [Object]
    }
  },
  evaluation: {
    quality: {
      carefulness: 0.7899999999999999,
      tests: 0.6,
      health: 0.625,
      branding: 0.15
    },
    popularity: {
      communityInterest: 16817,
      downloadsCount: 9473827.666666666,
      downloadsAcceleration: 15368.015810502286,
      dependentsCount: 0
    },
    maintenance: {
      releasesFrequency: 0.7591609589041095,
      commitsFrequency: 0.011506849315068493,
      openIssues: 1,
      issuesDistribution: 0
    }
  },
  score: {
    final: 0.6964007846895017,
    detail: {
      quality: 0.8763486407014901,
      popularity: 0.6771229910018363,
      maintenance: 0.5614375589383198
    }
  }
}
